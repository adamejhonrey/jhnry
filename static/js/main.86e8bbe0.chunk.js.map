{"version":3,"sources":["../../jzap/src/log/Log.js","../../jzap/src/environment/Environment.js","../../jzap/src/parser/Parser.js","../../jzap/src/parser/ZapFunction.js","../../jzap/src/ZAP/Zap.js","../../jzap/src/interpreter/Interpreter.js","../../jzap/src/lexer/Lexer.js","../../jzap/src/lexer/tokenList.js","../../jzap/src/evaluator/Evaluator.js","components/banner/context/AppContext.js","components/banner/context/examples.js","components/banner/context/ContextProvider.js","components/docs/context/DocContext.js","components/docs/context/ContextProvider.js","components/banner/Banner/styles.js","components/banner/Editor/styles.js","components/banner/Editor/Editor.js","components/banner/Terminal/styles.js","components/banner/Terminal/Terminal.js","components/banner/Logo/styles.js","components/banner/Logo/Logo.js","components/banner/Footer/styles.js","components/banner/Footer/Footer.js","components/banner/Banner/Container.js","components/docs/Documentation/styles.js","components/docs/Terminal/styles.js","components/docs/Terminal/Terminal.js","components/docs/Doc/styles.js","components/docs/Doc/Doc.js","components/docs/Navigation/styles.js","components/docs/Navigation/Navigation.js","components/docs/footer/styles.js","components/docs/footer/Footer.js","components/docs/context/colors.js","components/docs/context/data.js","components/docs/Documentation/Documentation.js","components/codeStructure/Structure/styles.js","components/codeStructure/Structure/assets/print/PrintStmt.js","components/codeStructure/Structure/assets/loop/WhileStmt.js","components/codeStructure/Structure/assets/conditional/IfStmt.js","components/codeStructure/Structure/assets/declaration/DeclarationStmt.js","components/codeStructure/Structure/assets/expression/ExprStmt.js","components/codeStructure/Structure/assets/function/FunctionStmt.js","components/codeStructure/Structure/Structure.js","components/codeStructure/Structure/assets/HandleStmt.js","App.js","serviceWorker.js","index.js","../../jzap/src/errorHandler/ErrorHandler.js"],"names":["globalLog","this","values","log","push","e","ln","message","module","exports","ErrorHandler","require","Environment","enclosing","errorHandler","identifier","value","Object","keys","includes","assign","throw","get","Evaluator","ZapFunction","BlockStmt","statement","environment","body","fetchBody","parser","Parser","execute","slice","load","statements","parse","PrintStmt","evaluator","expression","fetchExpression","evaluate","undefined","add","ExprStmt","DeclarationStmt","type","line","col","fetchValue","define","IfStmt","thenBlock","elseBlock","index","currentToken","prevToken","openingBrace","closingBrace","checkBrace","isInBlock","next","splitBlock","approve","WhileStmt","max","FunctionStmt","args","zapFunction","tokens","previousToken","currentStatement","handleBlock","handlePrint","handleDeclaration","handleIf","handleWhile","handleFunction","handleExpression","stmt","handleStatement","resetCurrentStatement","isSemicolon","length","name","arity","i","Interpreter","Zap","input","interpreter","Lexer","clear","lexer","tokenList","reserved","CharSeperator","charTypes","getCharTypes","split","char","entries","token","verification","charDescription","charSeperator","lex","peakNext","concat","resetCurrentToken","hasDecimal","operatorToTest","doubleCharOperator","isDoubleCharOperator","handleStr","handleNum","handleId","handleOperator","test","Assignment","operate","Binary","leftNode","operator","rightNode","Unary","Call","callee","evaluateArgs","parsedArgs","arg","argValue","call","Literal","parseFloat","Group","Variable","rawExpression","nextToken","openingParen","closingParen","bars","resetToEnd","checkParenthese","checkBar","assigned","expr","currentArgument","group","isInGroup","isForbidden","handleForbidden","prev","isReserved","handleReserved","reset","isLiteral","handleAssignment","isEqualityOperator","handleBinary","isComparissonOperator","isAdditionOperator","isOperator","isMultiplicationOperator","isUnaryOperator","handleUnary","handleCall","handleOpenParen","handlePrimary","handleVariable","AppContext","React","createContext","examples","prime","function","while","variable","pumpkin","CodeContextProvider","props","showStmt","show","setState","setValue","setSelection","selection","program","state","logs","result","contextValues","Provider","children","Component","DocContext","DocContextProvider","setStep","step","BannerContainer","styled","div","gradient","CodeContainer","GithubMark","a","SectionContainer","Button","BtnContainer","Editor","handleSelection","event","context","target","options","mode","theme","lineNumbers","onBeforeChange","editor","data","onChange","id","onClick","contextType","Container","DotContainer","Dot","css","left","color","TextField","rotate","keyframes","Terminal","handleShowStmt","d","Date","weekDay","getDay","day","getDate","month","getMonth","hour","getHours","minute","getMinutes","sec","getSeconds","map","item","Fragment","key","style","error","Pic","Slogan","span","LogoContainer","Logo","moveUpDown","FooterContainer","FooterText","DownArrow","Footer","Banner","gradientList","Math","floor","random","href","DocContainer","window","innerHeight","getError","text","Title","Description","Doc","title","description","size","current","Navigation","Pink","Green","Purple","Yellow","expressions","terminal","declarations","conditionals","loops","functions","Documentation","Close","StmtWrapper","Structure","handleClose","constructor","getType","console","handleStmt","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","msg","err","Error"],"mappings":"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","file":"static/js/main.86e8bbe0.chunk.js","sourcesContent":["class Log {\n  constructor() {\n    this.values = [];\n  };\n\n  add(log) {\n    this.values.push({\n      'log': log,\n    });\n  };\n\n  error(e, ln) {\n    this.values.push({\n      'error' : {\n        'message' : e.message,\n        'line' : ln,\n      }\n    });\n  };\n  \n  clear() {\n    this.values = [];\n    return this;\n  };\n};\n\nlet globalLog = new Log();\n\nmodule.exports = {\n  globalLog,\n};","const { ErrorHandler } = require('../errorHandler/ErrorHandler');\n\nclass Environment {\n  constructor(enclosing) {\n    this.errorHandler = new ErrorHandler();\n    this.values = {};\n    this.enclosing = null;\n    if (enclosing) {\n      this.enclosing = enclosing;\n    };\n  };\n\n  define(identifier, value) {\n    this.values[identifier] = value;\n  };\n\n  assign(identifier, value) {\n    if (!Object.keys(this.values).includes(identifier))\n    {\n      if (this.enclosing) \n      {\n        return this.enclosing.assign(identifier, value);\n      } \n      else \n      {\n        this.errorHandler.throw(\n          `UNDEFINED VARIABLE ${identifier}`\n        );\n      }\n    } \n    else \n    {\n      this.values[identifier] = value;\n    };\n  };\n\n  get(identifier) {\n    if (Object.keys(this.values).includes(identifier)) \n    {\n      return this.values[identifier];\n    }\n    else \n    {\n      if (this.enclosing) \n      {\n        return this.enclosing.get(identifier);\n      };\n      this.errorHandler.throw(\n        `UNDEFINED VARIABLE ${identifier}`\n      );\n    };\n  };\n};\n\nmodule.exports = {\n  Environment,\n};","const { ErrorHandler } = require('../errorHandler/ErrorHandler');\nconst { Evaluator } = require('../evaluator/Evaluator');\nconst { Environment } = require('../environment/Environment');\nconst { ZapFunction } = require('./ZapFunction');\n\nconst { globalLog } = require('../log/Log');\n\n\nclass BlockStmt {\n  constructor(statement, environment) {\n    this.statement = statement;\n    this.body = this.fetchBody();\n    this.parser = new Parser(environment);\n    this.execute()\n  };\n\n  fetchBody() {\n    return this.statement.slice(1, -1);\n  };\n\n  execute() {\n    this.parser.load(this.body);\n    this.statements = this.parser.parse();\n  };\n};\n\nclass PrintStmt {\n  constructor(statement, evaluator, log) {\n    this.log = log;\n    this.statement = statement;\n    this.expression = this.fetchExpression();\n    this.evaluator = evaluator;\n    this.value = null;\n    this.execute();\n  };\n\n  fetchExpression() {\n    return this.statement.slice(1);\n  };\n\n  execute() {\n    this.evaluator.load(this.expression);\n    this.value = this.evaluator.evaluate().value;\n\n    if (this.value != undefined) {\n      // console.log(this.value);\n      this.log.add(this.value);\n\n    } else {\n      // console.log();\n      this.log.add('');\n    };\n  };\n};\n\nclass ExprStmt {\n  constructor(statement, evaluator) {\n    this.expression = statement;\n    this.evaluator = evaluator;\n    this.evaluator.load(this.expression);\n    this.value = this.evaluator.evaluate().value;\n  }\n}\n\nclass DeclarationStmt {\n  constructor(statement, evaluator, environment) {\n    this.errorHandler = new ErrorHandler();\n    this.statement = statement;\n    this.evaluator = evaluator;\n    this.environment = environment;\n\n    this.value = null;\n    this.identifier = statement[1].value;\n    this.execute()\n  };\n\n  fetchValue() {\n    let value = null;\n    if (this.statement[2]) {\n      if (this.statement[2].type == 'EQUALS') {\n        let expression = this.statement.slice(3);\n        this.evaluator.load(expression);\n        value = this.evaluator.evaluate().value;\n        if (value == undefined) {\n          this.errorHandler.throw(\n            'INVALID DECLARATION STATEMENT',\n            this.statement[0].line,\n            this.statement[0].col\n          );\n        };\n      }\n      else {\n        this.errorHandler.throw(\n          'INVALID DECLARATION STATEMENT',\n          this.statement[0].line,\n          this.statement[0].col\n        );\n      };\n    };\n    return value;\n  };\n    \n  \n  execute() {\n      this.value = this.fetchValue();\n      return this.environment.define(this.identifier, this.value);\n  };\n};\n\nclass IfStmt {\n  constructor(statement, evaluator, environment) {\n    this.evaluator = evaluator;\n    this.parser = new Parser(environment);\n    this.errorHandler = new ErrorHandler();\n\n    this.statement = statement;\n\n    this.expression = [];\n    this.thenBlock = [];\n    this.elseBlock = null;\n\n    this.index = 1;\n    this.currentToken = this.statement[this.index];\n    this.prevToken = null;\n\n    this.openingBrace = 0;\n    this.closingBrace = 0;\n\n    this.execute();\n  };\n\n  next() {\n    this.prevToken = this.statement[this.index];\n    this.index++;\n    this.currentToken = this.statement[this.index];\n    this.checkBrace();\n  };\n\n  checkBrace() {\n    if (this.currentToken) {\n      if (this.currentToken.type == 'LBRACE') {\n        this.openingBrace++;\n      };\n      if (this.currentToken.type == 'RBRACE') {\n        this.closingBrace++;\n      };\n    };\n  };\n\n  isInBlock() {\n    return this.closingBrace != this.openingBrace;\n  };\n\n  splitBlock() {\n    while (!this.isInBlock()) {\n      this.expression.push(this.currentToken);\n      this.next();\n      if (!this.currentToken) {\n        this.errorHandler.throw(\n          `EXPECTED '{' AFTER EXPRESSION`,\n          this.prevToken.line,\n          this.prevToken.col\n        );\n      };\n    };\n\n    while (this.isInBlock()) {\n      this.thenBlock.push(this.currentToken);\n      this.next();\n      if (!this.currentToken) {\n        this.errorHandler.throw(\n          `EXPECTED '}' AFTER THEN BLOCK`,\n          this.prevToken.line,\n          this.prevToken.col\n        );\n      }\n    };\n    this.thenBlock.push(this.currentToken);\n    this.thenBlock.push({\n      type: 'SEMICOLON', \n      value: ';'\n    });\n    this.next();\n\n    if (this.currentToken) {\n      if (this.currentToken.type == 'ELSE') {\n        this.next();\n        if (this.isInBlock()) {\n          this.elseBlock = [];\n\n          while (this.isInBlock()) {\n            this.elseBlock.push(this.currentToken);\n            this.next();\n            if (!this.currentToken) {\n              this.errorHandler.throw(\n                `EXPECTED '}' AFTER ELSE BLOCK`,\n                this.prevToken.line,\n                this.prevToken.col\n              );\n            };\n          };\n          this.elseBlock.push(this.currentToken);\n          this.elseBlock.push({\n            type: 'SEMICOLON', \n            value: ';'\n          });\n          this.next();\n        }\n        else {\n          this.errorHandler.throw(\n            `UNABLE TO PARSE ELSE STATEMENT`,\n            this.prevToken.line,\n            this.prevToken.col\n          );\n        };\n      }\n      else {\n        this.errorHandler.throw(\n          `UNEXPECTED KEYWORD AFTER IF STATEMENT`,\n          this.prevToken.line,\n          this.prevToken.col\n        );\n      };\n    };\n  };\n\n  execute() {\n    this.splitBlock();\n\n    this.evaluator.load(this.expression);\n    let approve = this.evaluator.evaluate().value;\n\n    if (approve) {\n      this.parser.load(this.thenBlock);\n      this.parser.parse();\n    };\n    if (!approve) {\n      if (this.elseBlock) {\n        this.parser.load(this.elseBlock);\n        this.parser.parse();\n      };\n    };\n  };\n};\n\nclass WhileStmt {\n  constructor(statement, evaluator, environment) {\n    this.evaluator = evaluator;\n    this.parser = new Parser(environment);\n    this.errorHandler = new ErrorHandler();\n\n    this.statement = statement;\n\n    this.expression = [];\n    this.body = [];\n\n    this.index = 1;\n    this.currentToken = this.statement[this.index];\n    this.prevToken = null;\n\n    this.openingBrace = 0;\n    this.closingBrace = 0;\n\n    this.execute();\n  };\n\n  next() {\n    this.prevToken = this.statement[this.index];\n    this.index++;\n    this.currentToken = this.statement[this.index];\n    this.checkBrace();\n  };\n\n  checkBrace() {\n    if (this.currentToken) {\n      if (this.currentToken.type == 'LBRACE') {\n        this.openingBrace++;\n      };\n      if (this.currentToken.type == 'RBRACE') {\n        this.closingBrace++;\n      };\n    };\n  };\n\n  isInBlock() {\n    return this.closingBrace != this.openingBrace;\n  };\n\n  splitBlock() {\n    while (!this.isInBlock()) {\n      this.expression.push(this.currentToken);\n      this.next();\n      if (!this.currentToken) {\n        this.errorHandler.throw(\n          `EXPECTED '{' AFTER EXPRESSION`,\n          this.prevToken.line,\n          this.prevToken.col\n        );\n      };\n    };\n\n    while (this.isInBlock()) {\n      this.body.push(this.currentToken);\n      this.next();\n      if (!this.currentToken) {\n        this.errorHandler.throw(\n          `EXPECTED '}' AFTER BODY OF WHILE`,\n          this.prevToken.line,\n          this.prevToken.col\n        );\n      }\n    };\n    this.body.push(this.currentToken);\n    this.body.push({\n      type: 'SEMICOLON', \n      value: ';'\n    });\n    this.next()\n\n    if (this.currentToken) {\n      this.errorHandler.throw(\n        `UNEXPECTED TOKEN AFTER WHILE STATEMENT`,\n        this.currentToken.line,\n        this.currentToken.col\n      );\n    };\n  };\n\n\n  execute() {\n    this.splitBlock();\n    let max = 1000;\n    this.evaluator.load(this.expression);\n    while (!!this.evaluator.evaluate().value) {\n      this.parser.load(this.body);\n      this.parser.parse();\n      this.evaluator.load(this.expression);\n      max--;\n      if (max <= 0) {\n        this.errorHandler.throw(\n          `MAXIMUM NUMBER OF LOOPS EXCEEDED`\n        );\n        break;\n      };\n    };\n  };\n};\n\nclass FunctionStmt {\n  constructor(statement, evaluator, environment) {\n    this.evaluator = evaluator;\n    this.environment = environment;\n    this.errorHandler = new ErrorHandler();\n\n    this.statement = statement;\n\n    this.identifier = null;\n    this.args = [];\n    this.body = [];\n\n    this.index = 1;\n    this.currentToken = this.statement[this.index];\n    this.prevToken = null;\n\n    this.execute();\n  };\n\n  next() {\n    this.prevToken = this.statement[this.index];\n    this.index++;\n    this.currentToken = this.statement[this.index];\n  };\n\n  splitBlock() {\n    this.identifier = this.currentToken.value;\n    this.next();\n    if (!this.currentToken || this.currentToken.type != 'BAR') {\n      this.errorHandler.throw(\n        `EXPECTED '|' AFTER FUNCTION DECLARATION`,\n        this.prevToken.line,\n        this.prevToken.col\n      );\n    };\n    this.next();\n\n    while (this.currentToken && this.currentToken.type != 'BAR') {\n      this.args.push(this.currentToken);\n      this.next();\n      if (!this.currentToken) {\n        this.errorHandler.throw(\n          `EXPECTED '|' AFTER ARGUMENT LIST`,\n          this.prevToken.line,\n          this.prevToken.col\n        );\n      };\n      if (this.currentToken.type != 'COMMA' && this.currentToken.type != 'BAR') {\n        this.errorHandler.throw(\n          `EXPECTED ',' AFTER ARGUMENT`,\n          this.prevToken.line,\n          this.prevToken.col\n        );\n      }\n      if (this.currentToken.type == 'BAR') {\n        break;\n      };\n      this.next();\n    };\n\n    this.next();\n\n    if (!this.currentToken || this.currentToken.type != 'FATARROW') {\n      this.errorHandler.throw(\n        `EXPECTED '=>' AFTER FN DECLARATION`,\n        this.prevToken.line,\n        this.prevToken.col\n      );\n    };\n    this.next();\n\n    this.body = this.statement.slice(this.index);\n    this.body.push({\n      type : 'SEMICOLON',\n      value : ';',\n    });\n  };\n\n  execute() {\n    this.splitBlock();\n    const zapFunction = new ZapFunction(\n      this.identifier, \n      this.args, \n      this.body, \n      this.environment\n    );\n    this.environment.define(this.identifier, zapFunction);\n  };\n};\n\nclass Parser {\n  constructor (environment) {\n    this.environment = environment\n    this.evaluator = new Evaluator(this.environment);\n    this.errorHandler = new ErrorHandler();\n    this.log = globalLog;\n\n\n    this.tokens = null;\n    this.index = null;\n    this.currentToken = null;\n    this.previousToken = null;\n\n    this.statements = [];\n    this.currentStatement = [];\n\n    this.openingBrace = 0;\n    this.closingBrace = 0;\n  };\n\n  load(tokens) {\n    this.tokens = tokens;\n    this.index = 0;\n    this.currentToken = this.currentToken = this.tokens[this.index];\n    this.previousToken = null;\n\n    this.openingBrace = 0;\n    this.closingBrace = 0;\n\n    this.checkBrace();\n  }\n\n  resetCurrentStatement() {\n    this.currentStatement = [];\n  }\n\n  checkBrace() {\n    if (this.currentToken) {\n      if (this.currentToken.type == 'LBRACE') {\n        this.openingBrace++;\n      };\n      if (this.currentToken.type == 'RBRACE') {\n        this.closingBrace++;\n      };\n    };\n  };\n\n  next() {\n    this.index++;\n    this.currentToken = this.tokens[this.index];\n    this.previousToken = this.tokens[this.index-1];\n\n    this.checkBrace();\n  };\n\n  isInBlock() {\n    return this.openingBrace != this.closingBrace;\n  };\n\n  isSemicolon() {\n    return this.currentToken.type == 'SEMICOLON';\n  };\n\n  handleBlock(statement) {\n    let stmt = new BlockStmt(\n      statement,\n      new Environment(this.environment),\n    );\n    // console.log(stmt);\n    return stmt;\n  };\n\n  handlePrint(statement) {\n    let stmt = new PrintStmt(\n      statement,\n      this.evaluator,\n      this.log,\n    );\n    // console.log(stmt);\n    return stmt;\n  };\n\n  handleDeclaration(statement) {\n    let stmt = new DeclarationStmt(\n      statement,\n      this.evaluator,\n      this.environment,\n    );\n    // console.log(stmt);\n    return stmt;\n  };\n\n  handleIf(statement) {\n    // console.log(statement);\n    let stmt = new IfStmt(\n      statement,\n      this.evaluator,\n      this.environment\n    );\n    // console.log(stmt);\n    return stmt;\n  };\n\n  handleExpression(statement) {\n    let stmt = new ExprStmt(\n      statement,\n      this.evaluator,\n    );\n    // console.log(stmt);\n    return stmt;\n  };\n\n  handleWhile(statement) {\n    let stmt = new WhileStmt(\n      statement,\n      this.evaluator,\n      this.environment\n    );\n    // console.log(stmt);\n    return stmt;\n  }\n\n  handleFunction(statement) {\n    let stmt = new FunctionStmt(\n      statement,\n      this.evaluator,\n      this.environment\n    );\n    // console.log(stmt);\n    return stmt;\n  }\n\n  handleStatement(statement) {\n    // console.log(statement);\n    if (statement[0].type == 'LBRACE') {\n      return this.handleBlock(statement)\n    };\n\n    if (statement[0].type == 'SHOW') {\n      return this.handlePrint(statement);\n    };\n\n    if (statement[0].type == 'DECLARATOR') {\n      return this.handleDeclaration(statement);\n    };\n\n    if (statement[0].type == 'IF') {\n      return this.handleIf(statement);\n    };\n\n    if (statement[0].type == 'WHILE') {\n      return this.handleWhile(statement);\n    };\n\n    if (statement[0].type == 'FUNCTION') {\n      return this.handleFunction(statement);\n    };\n\n    return this.handleExpression(statement);\n  };\n\n  parse() {\n    while (this.currentToken) {\n      if (!this.isInBlock())\n      {\n        if (!this.isSemicolon()) {\n          this.currentStatement.push(this.currentToken);\n        } else {\n          let stmt = this.handleStatement(this.currentStatement);\n          this.statements.push(stmt);\n          this.resetCurrentStatement();\n        };\n        this.next()\n        continue;\n      } \n      else \n      {\n        this.currentStatement.push(this.currentToken);\n        if (!this.isInBlock()) {\n          let stmt = this.handleStatement(this.currentStatement);\n          this.statements.push(stmt);\n          this.resetCurrentStatement();\n        };\n        this.next();\n      };\n    };\n\n    if (this.currentStatement.length) {\n      this.errorHandler.throw(\n        'YOU MUST HAVE FORGOTTEN A SEMICOLON OR CLOSING BRACE',\n        this.previousToken.line,\n        this.previousToken.col\n      );\n    };\n\n    return this.statements;\n\n  };\n};\n\nmodule.exports = {\n  Parser,\n};","const { ErrorHandler } = require('../errorHandler/ErrorHandler');\nconst { Environment } = require('../environment/Environment');\n\nclass ZapFunction {\n  constructor(name, args, body, environment) {\n    const { Parser } = require('./Parser');\n\n    this.errorHandler = new ErrorHandler();\n    this.environment = new Environment(environment);\n    this.parser = new Parser(this.environment);\n    this.name = name;\n    this.args = args;\n    this.body = body;\n    this.arity = args.length;\n  };\n\n  call(args) {\n    if (args.length != this.args.length) {\n      this.errorHandler.throw(\n        `INVALID NUMBER OF ARGUMENTS PASSED TO ${this.name}`,\n      )\n    };\n\n    for (let i=0; i < args.length; i++) {\n      this.environment.define(this.args[i]['value'], args[i]);\n    };\n    \n    this.parser.load(this.body);\n    this.parser.parse();\n  };\n};\n\nmodule.exports = {\n  ZapFunction,\n};","const { Interpreter } = require('../interpreter/Interpreter');\nconst fs = require('fs');\n\nclass Zap {\n  constructor(input) {\n    this.input = input;\n    this.interpreter = new Interpreter(this.input);\n  };\n};\n\nconst fetchSource = () => {\n  let file = process.argv[2];\n  if (!file)\n  {\n    console.log('USAGE -- [ node Zap.js <filename> ]');\n  }\n  else\n  {\n    try \n    {\n      const data = fs.readFileSync(file, 'utf8');\n      return data  \n    } \n    catch(e) \n    {\n      console.log('USAGE -- [ node Zap.js <filename> ]');\n      console.log('Error:', e.stack);\n    };\n  };\n\n  return [];\n\n};\n\n// console.time('interpreting');\n// new Zap(fetchSource());\n// console.timeEnd('interpreting');\n\nmodule.exports = {\n  Zap,\n};","const { ErrorHandler } = require('../errorHandler/ErrorHandler');\nconst { Lexer } = require('../lexer/Lexer');\nconst { Environment } = require('../environment/Environment');\nconst { Parser } = require('../parser/Parser');\n\nconst { globalLog } = require('../log/Log');\n\nclass Interpreter {\n  constructor(input) {\n    globalLog.clear();\n    \n    this.errorHandler = new ErrorHandler();\n    this.environment = new Environment(null);\n    this.lexer = new Lexer(input);\n    this.parser = new Parser(this.environment);\n    this.parser.load(this.lexer.tokens);\n    this.statements = this.parser.parse();\n  };\n};\n\nmodule.exports = {\n  Interpreter,\n};","const { tokenList , reserved } = require('./tokenList');\nconst { ErrorHandler } = require('../errorHandler/ErrorHandler');\n\nclass CharSeperator {\n  constructor(input) {\n    this.errorHandler = new ErrorHandler();\n    this.input = input;\n    this.charTypes = [];\n    this.getCharTypes();\n  };\n\n  getCharTypes() {\n    let line = 1;\n    let col = 1;\n    for (let char of this.input.split('')) {\n      for (let [ token , verification ] of Object.entries(tokenList)) {\n        if (verification(char)) {\n          const charDescription = {};\n          charDescription['type'] = token;\n          charDescription['line'] = line;\n          charDescription['col'] = col;\n          charDescription['value'] = char;\n          if (charDescription.type == \"UNRECOGNIZED\") {\n            this.errorHandler.throw(`UNRECOGNIZED SYNTAX`, charDescription['line'], charDescription['col']);\n          } else {\n            this.charTypes.push(charDescription);\n          };\n          break;\n        }\n      }\n      if (char == '\\n') {\n        col = 1;\n        line++;\n      } else {\n        col++;\n      };\n    };\n  };\n};\n\n\n/*\n\n\n\n                          {[{[ --> THE LEXER <-- ]}]}\n\n                  The goal here is to take a stream of inputs\n               & separate it into tokens that have meaning to the\n                                   language.\n\n               We start by separating each character of the stream\n                                  by its type.\n                             The possible types are:\n\n           1. +  2. -  3. *  4. /  5. %  6. =  7. == 8. != 9. >  10.  <\n\n           11.<= 12.<= 13. ! 14. ( 15. ) 16. { 17. } 18. ; 19. ' 20. .\n\n       Besides these types, the char can be a Letter, Number or Whitespace.\n\n\n              After classifying all the characters, we can move on\n          to grouping these symbols into larger lexemes or tokens that\n                   our language will be able to understand.\n\n\n\n*/\n\n\nclass Lexer {\n  constructor (input) {\n    this.charSeperator = new CharSeperator(input);\n    this.errorHandler = new ErrorHandler();\n    this.charTypes = this.charSeperator.charTypes;\n    this.index = 0;\n    this.char = this.charTypes[this.index];\n    this.currentToken = {};\n    this.tokens = [];\n    this.lex();\n  }\n\n  resetCurrentToken() {\n    this.currentToken = {};\n  }\n\n  next() {\n    this.index++;\n    this.char = this.charTypes[this.index];\n  };\n\n  peakNext() {\n    try {\n      return this.charTypes[this.index + 1];\n    } catch {\n      return false;\n    };\n  };\n\n  handleStr() {\n    this.currentToken = {\n      \"type\" : \"STRING\",\n      \"line\" : this.char.line,\n      \"col\" : this.char.col,\n      \"value\" : \"\",\n    };\n\n    if (this.peakNext()) {\n      this.next();\n    } else {\n      this.errorHandler.throw('EOF WHILE PARSING STRING', this.currentToken.line, this.currentToken.col);\n    }\n\n    while (this.char.type != \"QUOTE\") {\n      this.currentToken.value = this.currentToken.value.concat(this.char.value);\n      this.next();\n      if (!this.char) {\n        this.errorHandler.throw('EOF WHILE PARSING STRING', this.currentToken.line, this.currentToken.col);\n      };\n    };\n    this.tokens.push(this.currentToken);\n    this.resetCurrentToken();\n    this.next();\n    this.lex();\n  };\n\n  handleNum() {\n    let hasDecimal = false;\n\n    this.currentToken = {\n      \"type\" : \"NUMBER\",\n      \"line\" : this.char.line,\n      \"col\" : this.char.col,\n      \"value\" : \"\",\n    };\n\n    // Long statements to handle decimal and int numbers\n    while (this.char.type == \"NUMBER\" || (!hasDecimal && this.char.type == \"DOT\" && this.peakNext() && this.peakNext().type == \"NUMBER\")) {\n      if (this.char.type == \"DOT\") {\n        hasDecimal = true;\n      };\n      this.currentToken.value = this.currentToken.value.concat(this.char.value);\n      this.next();\n      if (!this.char) {\n        break;\n      };\n    };\n    this.tokens.push(this.currentToken);\n    this.resetCurrentToken();\n    this.lex();\n  };\n\n  handleId() {\n    this.currentToken = {\n      \"type\" : \"IDENTIFIER\",\n      \"line\" : this.char.line,\n      \"col\" : this.char.col,\n      \"value\" : \"\",\n    };\n\n    while (this.char.type == \"NUMBER\" || this.char.type == \"LETTER\") {\n      this.currentToken.value = this.currentToken.value.concat(this.char.value);\n      this.next();\n      if (!this.char) {\n        break;\n      };\n    };\n\n    if (Object.keys(reserved).includes(this.currentToken.value)) {\n      this.currentToken.type = reserved[this.currentToken.value];\n    };\n\n    this.tokens.push(this.currentToken);\n    this.resetCurrentToken();\n    this.lex();\n  };\n\n\n  isDoubleCharOperator() {\n    if (this.peakNext()) {\n      let operatorToTest = this.char.value.concat(this.peakNext().value)\n      for (let [ type , verification ] of Object.entries(tokenList)) {\n        if (verification(operatorToTest) && (type != \"UNRECOGNIZED\")) {\n          return {\n            \"type\" : type,\n            \"line\" : this.char.line,\n            \"col\" : this.char.col,\n            \"value\" : operatorToTest,\n          };\n        };\n      };\n      return false;\n    };\n  };\n\n  handleOperator() {\n    if (this.char.type != \"WHITESPACE\") {\n      let doubleCharOperator = this.isDoubleCharOperator();\n      if (doubleCharOperator) {\n        this.next();\n        this.currentToken = doubleCharOperator;\n        this.tokens.push(this.currentToken);\n        this.resetCurrentToken();\n      } else {\n        this.currentToken = this.char;\n        this.tokens.push(this.currentToken);\n        this.resetCurrentToken();\n      };\n    };\n    this.next();\n    this.lex();\n  };\n\n  lex() {\n    if (this.char) {\n      switch(this.char.type) {\n        case \"QUOTE\":\n          this.handleStr();\n          break;\n        case \"NUMBER\":\n          this.handleNum();\n          break;\n        case \"LETTER\":\n          this.handleId();\n          break;\n        default:\n          this.handleOperator();\n      };\n    };\n  };\n};\n\nmodule.exports = {\n  Lexer,\n};","const tokenList = {\n  \"PLUS\" : (input) => input == '+',\n  \"MINUS\" : (input) => input == '-',\n  \"DIVIDE\" : (input) => input == '/',\n  \"MULTIPLY\" : (input) => input == '*',\n  \"MODULO\" : (input) => input == '%',\n\n  \"EQUALS\" : (input) => input == '=',\n\n  \"GREATERTHAN\" : (input) => input == '>',\n  \"LESSTHAN\" : (input) => input == '<',\n  \"NOT\" : (input) => input == '!',\n  \"GREATERTHANEQUAL\" : (input) => input == '>=',\n  \"LESSTHANEQUAL\" : (input) => input == '<=',\n  \"NOTEQUALTO\" : (input) => input == '!=',\n  \"EQUALTO\" : (input) => input == '==',\n\n  \"FATARROW\" : (input) => input == '=>',\n\n  \"LPAREN\" : (input) => input == '(',\n  \"RPAREN\" : (input) => input == ')',\n  \"LBRACE\" : (input) => input == '{',\n  \"RBRACE\" : (input) => input == '}',\n\n  \"BAR\" : (input) => input == '|',\n  \"COMMA\" : (input) => input == ',',\n\n  \"SEMICOLON\" : (input) => input ==';',\n  \"QUOTE\" : (input) => input == \"'\",\n  \"DOT\" : (input) => input =='.',\n\n  \"DECLARATOR\" : (input) => input == '@',\n\n  \"NUMBER\" : (input) => /^[0-9]+$/.test(input),\n  \"LETTER\" : (input) => /^[a-zA-Z]+$/.test(input),\n  \"WHITESPACE\" : (input) => !/\\S/.test(input),\n\n  \"UNRECOGNIZED\" : (input) => true,\n};\n\nconst reserved = {\n  \"for\" : 'FOR',\n  \"while\" : 'WHILE',\n  \"return\" : 'RETURN',\n  \"show\" : \"SHOW\",\n  \"if\" : \"IF\",\n  \"else\" : \"ELSE\",\n  \"fn\" : \"FUNCTION\",\n};\n\nmodule.exports = {\n  tokenList,\n  reserved,\n};","const { ErrorHandler } = require('../errorHandler/ErrorHandler');\nconst { ZapFunction } = require('../parser/ZapFunction');\n\nclass Assignment {\n  constructor(token, expression, evaluator, environment) {\n    this.identifier = token.value;\n    this.expression = expression;\n\n    this.evaluator = evaluator;\n    this.environment = environment;\n    this.evaluator.load(expression);\n    this.value = this.evaluator.evaluate().value;\n    this.operate();\n  };\n  operate() {\n    this.environment.assign(this.identifier, this.value);\n  };\n};\n\nclass Binary {\n  constructor(leftNode, operator, rightNode, evaluator) {\n    this.evaluator = evaluator;\n\n    this.evaluator.load(leftNode);\n    this.leftNode = this.evaluator.evaluate();\n\n    this.evaluator.load(rightNode);\n    this.rightNode = this.evaluator.evaluate();\n    \n    this.operator = operator.type;\n    this.value = this.operate();\n  };\n\n  operate() {\n    if (this.operator == 'PLUS') {\n      return this.leftNode.value + this.rightNode.value;\n    };\n    if (this.operator == 'MINUS') {\n      return this.leftNode.value - this.rightNode.value;\n    };\n    if (this.operator == 'MULTIPLY') {\n      return this.leftNode.value * this.rightNode.value;\n    };\n    if (this.operator == 'DIVIDE') {\n      return this.leftNode.value / this.rightNode.value;\n    };\n    if (this.operator == 'MODULO') {\n      return this.leftNode.value % this.rightNode.value;\n    };\n    if (this.operator == 'EQUALTO') {\n      return this.leftNode.value == this.rightNode.value;\n    };\n    if (this.operator == 'NOTEQUALTO') {\n      return this.leftNode.value != this.rightNode.value;\n    };\n    if (this.operator == 'GREATERTHAN') {\n      return this.leftNode.value > this.rightNode.value;\n    };\n    if (this.operator == 'LESSTHAN') {\n      return this.leftNode.value < this.rightNode.value;\n    };\n    if (this.operator == 'GREATERTHANEQUAL') {\n      return this.leftNode.value >= this.rightNode.value;\n    };\n    if (this.operator == 'LESSTHANEQUAL') {\n      return this.leftNode.value <= this.rightNode.value;\n    };\n  }\n};\n\nclass Unary {\n  constructor(operator , expression, evaluator) {\n    this.evaluator = evaluator;\n    this.evaluator.load(expression);\n\n    this.operator = operator;\n    this.expression = expression;\n    this.value = this.operate();\n  }\n  operate() {\n    if (this.operator.type == \"MINUS\") {  \n      return ( - ( this.evaluator.evaluate().value ) );\n    };\n    if (this.operator.type == \"PLUS\") {\n      return (this.evaluator.evaluate().value);\n    }\n    if (this.operator.type == \"NOT\") {\n      return !(this.evaluator.evaluate().value);\n    }\n  };\n}\n\nclass Call {\n  constructor(callee, args, evaluator, environment) {\n    this.errorHandler = new ErrorHandler();\n    this.callee = callee;\n    this.evaluator = evaluator;\n    this.args = this.evaluateArgs(args);\n    this.environment = environment;\n    this.value = this.operate();\n  };\n\n  evaluateArgs(args) {\n    let parsedArgs = [];\n    for (let arg of args) {\n      this.evaluator.load(arg);\n      let argValue = this.evaluator.evaluate().value;\n      parsedArgs.push(argValue);\n    }\n    return parsedArgs;\n  };\n\n  operate() {\n    const zapFunction = this.environment.get(this.callee.value);\n    if (!(zapFunction instanceof ZapFunction)) {\n      this.errorHandler.throw(\n        `INVALID CALLEE TYPE`,\n        this.callee.line,\n        this.callee.col,\n      );\n    };\n    return zapFunction.call(this.args);\n  };\n};\n\nclass Literal {\n  constructor(token) {\n    if (token.type == \"NUMBER\") {\n      this.value = parseFloat(token.value);\n    };\n    if (token.type == \"STRING\") {\n      this.value = token.value;\n    };\n  };\n};\n\nclass Group {\n  constructor(expression, evaluator) {\n    this.evaluator = evaluator;\n    this.evaluator.load(expression);\n    this.value = this.evaluator.evaluate().value;\n  };\n};\n\nclass Variable {\n  constructor(token, environment) {\n    this.identifier = token.value;\n    this.environment = environment;\n    this.value = this.fetchValue();\n  }\n  fetchValue() {\n    return this.environment.get(this.identifier);\n  };\n}\n\n/*\n                 ::::{[{[ --> THE EVALUATING LOGIC <-- ]}]}::::\n\n        The logic behind the evaluator is to create a tree of operations.\n      It starts by iterating through the Whole raw expression (token list),\n                            from right to left,\n              trying to find the operators of lowest precedence \n                    (the ones that will be executed last).\n              As soon as it finds an operator of type \"+\" or \"-\",\n                 it becomes the first expression in the tree.\n       The expressions can be of 4 types: Binary, Unary, Group or Literal.\n\n             The Evaluator will iterate through the raw Expression,\n                  Always trying break down bigger expressions\n             into smaller ones until it works with only Primaries.\n\n                             THE EXPRESSION TYPES\n\n          Binary Expressions :\n            --> Have a left and right sub-expression, along with an operator.\n            --> The expression's value is calculated by\n                joining the values of the left and right \n                sub-expressions through the operator.\n            --> EXAMPLES:\n      \n          1.     \"PLUS\"                    2.        \"MULTPLY\"                                            \n                   /\\                                    /\\                            \n                  /  \\                                  /  \\                           \n                 5    6                               5+6  7-3                    \n                                                                                  \n           Calculated Value: 11                  Calculated Value: 44                                                                 \n                         \n            --> {{ RECURSION ALERT }}\n                Notice how in Example 2,\n                the sub-expressions are also of type \"Binary Expression\"   \n\n\n\n          Unary Expressions :\n            --> Have a sub-expression, along with a unary operator (\"!\" or \"-\").\n            --> The expression's value is calculated by\n                joining the value of the sub-expression with the operator.\n            --> EXAMPLES:\n      \n          1.     \"PLUS\"                    2.        \"MINUS\"                                            \n                    |                                   |                           \n                    5                                   9                     \n                                                                \n                                                                                  \n           Calculated Value: 5                  Calculated Value: -9                                                                 \n                          \n\n\n          Group Expressions :\n            --> Are the ones in between parenthesis.\n            --> The expression's value is calculated by parsing\n                the expression in between parenthesis.\n            --> Examples:\n          \n          1.    \"(2 + 3)\"                                                             \n                    |\n                    V                                                         \n                   2+3    \n                    |\n                    V\n                  \"PLUS\"                                           \n                    /\\                                            \n                   /  \\\n                  2    3\n                   \n           Calculated Value: 5                   \n                \n                     \n           \n          Primary Expressions :\n            --> Are the ones that represent a Literal (String, Int, Float, etc.).\n            --> The expression's value is the Literal it holds.\n            --> Examples:\n          \n          1.      \"245\"                                                             \n                    \n           Calculated Value: 245                              \n\n\n                            {[{[ --> EXAMPLE <--]}]}\n                                                                                                                                                                                  \n                    (3 + 5) - 8 * (4 - (8 / 2) - 7) + 4 * (9)                                                                                                                                                    \n                                                    |                                                                                                                              \n                                                  \"PLUS\"                                                                                                                                           \n                                                    /\\                                                                                                                                         \n                                                   /  \\                                                                                                                                        \n                     (3 + 5) - 8 * (4 - (8 / 2) - 7)   4 * (9)                                                                                                                                                                 \n                             |                           |                                    \n                          \"MINUS\"                      \"MULT\"                                                                                                                                  \n                            /\\                           /\\                                                                                                                                                                                       \n                           /  \\                         4   (9)                                                                                                                                                       \n                          /    \\                             |                                                                    \n                  (3 + 5)      8 * (4 - (8 / 2) - 7)         9                                                                                       \n                /                |                                                                                                          \n          GROUP(3+5)         \"MULTIPLY\"                                                                                                      \n              |                  /\\                                                                                         \n            3 + 5               /  \\                                                                     \n              |                8    (4 - (8 / 2) - 7)                                                         \n            \"PLUS\"                          |                             \n              /\\                     4 - (8 / 2) - 7                                                     \n             /  \\                                |                                         \n            3    5                            \"MINUS\"                                 \n                                                 /\\                             \n                                                /  \\                              \n                                    4 - (8 / 2)      7                         \n                                      |                                        \n                                   \"MINUS\"                                          \n                                      /\\                                                                        \n                                     /  \\                                                                                                        \n                                    4    (8 / 2)                                                                    \n                                            |                                                                \n                                          8 / 2                                                                  \n                                            |                                                                \n                                         \"DIVIDE\"                                                                   \n                                            /\\                                                                \n                                           /  \\        \n                                          8    2\n                                           \n\n*/\n\nclass Evaluator {\n  constructor(environment) {\n    this.environment = environment;\n\n    this.errorHandler = new ErrorHandler();\n    this.rawExpression = null;\n    this.index = null;\n    this.previousToken = null;\n    this.currentToken = null;\n    this.nextToken = null;\n    this.openingParen = 0;\n    this.closingParen = 0;\n    this.bars = 0;\n  };\n\n  load(tokens) {\n    this.rawExpression = tokens;\n    this.resetToEnd();\n  }\n\n  reset() {\n    this.index = 0;\n    this.previousToken = null;\n    this.currentToken = this.rawExpression[this.index];\n    this.nextToken = this.rawExpression[this.index+1];\n    this.openingParen = 0;\n    this.closingParen = 0;\n\n    this.checkParenthese();\n    this.checkBar();\n  };\n\n  resetToEnd() {\n    this.index = this.rawExpression.length - 1;\n    this.previousToken = this.rawExpression[this.index - 1];\n    this.currentToken = this.rawExpression[this.index];\n    this.nextToken = null;\n    this.openingParen = 0;\n    this.closingParen = 0;\n\n    this.checkParenthese();\n    this.checkBar();\n  };\n\n  next() {\n    this.index++;\n    this.previousToken = this.rawExpression[this.index-1];\n    this.currentToken = this.rawExpression[this.index];\n    this.nextToken = this.rawExpression[this.index+1];\n    \n    this.checkParenthese();\n    this.checkBar();\n  };\n\n  prev() {\n    this.index--;\n    this.previousToken = this.rawExpression[this.index-1];\n    this.currentToken = this.rawExpression[this.index];\n    this.nextToken = this.rawExpression[this.index+1];\n    \n    this.checkParenthese();\n    this.checkBar();\n  };\n\n  checkParenthese() {\n    if (this.currentToken) {\n      if (this.currentToken.type == \"LPAREN\") {\n        this.openingParen++;\n      };\n      if (this.currentToken.type == \"RPAREN\") {\n        this.closingParen++;\n      };\n    };\n  };\n\n  checkBar() {\n    if (this.currentToken) {\n      if (this.currentToken.type == \"BAR\") {\n        this.bars++;\n      };\n    };\n  };\n\n  isInGroup() {\n    return (this.openingParen != this.closingParen) || (this.bars % 2 != 0);\n  }\n\n  isOperator(token) {\n    let operators = [\n      \"MULTIPLY\", \n      \"DIVIDE\", \n      \"PLUS\", \n      \"MINUS\", \n      \"MODULO\", \n      \"GREATERTHAN\", \n      \"GREATERTHANEQUAL\",\n      \"LESSTHAN\",\n      \"LESSTHANEQUAL\", \n      \"EQUALTO\",\n      \"NOTEQUALTO\",\n      \"NOT\",\n    ];\n    return (operators.includes(token.type) );\n  };\n\n  isEqualityOperator(token) {\n    let operators = [\n      \"EQUALTO\",\n      \"NOTEQUALTO\",\n    ];\n    return (operators.includes(token.type) );\n  }\n\n  isComparissonOperator(token) {\n    let operators = [ \n      \"GREATERTHAN\", \n      \"GREATERTHANEQUAL\",\n      \"LESSTHAN\",\n      \"LESSTHANEQUAL\", \n    ];\n    return (operators.includes(token.type) );\n  }\n\n  isAdditionOperator(token) {\n    let operators = [\n      \"PLUS\",\n      \"MINUS\",\n    ];\n    return (operators.includes(token.type) );\n  }\n\n  isMultiplicationOperator(token) {\n    let operators = [\n      \"MULTIPLY\",\n      \"DIVIDE\",\n      \"MODULO\",\n    ];\n    return (operators.includes(token.type) );\n  }\n\n  isUnaryOperator(token) {\n    let operators = [\n      \"MINUS\",\n      \"NOT\",\n      \"PLUS\",\n    ];\n    return (operators.includes(token.type) );\n  }\n\n  isLiteral(token) {\n    let types = [\n      \"STRING\",\n      \"NUMBER\",\n    ];\n    return (types.includes(token.type) );\n  }\n\n  isReserved(token) {\n    let types = [ \n      \"FOR\", \n      \"WHILE\",\n      \"RETURN\",\n      \"SHOW\", \n    ];\n    return types.includes(token.type);\n  };\n\n  isForbidden(token) {\n    let types = [ \n      \"RBRACE\",\n      \"LBRACE\",\n      \"SEMICOLON\", \n      \"DOT\",\n      \"DECLARATOR\",\n    ];\n    return types.includes(token.type);\n  }\n\n  handleAssignment() {\n    // console.log('isAssignment')\n    let assigned = this.rawExpression.slice(0, this.index);\n    let expression = this.rawExpression.slice(this.index+1);\n\n    if (assigned.length != 1 || !expression.length) {\n      this.errorHandler.throw(\n        'UNABLE TO PARSE ASSIGNMENT',\n        this.currentToken.line,\n        this.currentToken.col\n      );\n    };\n\n    let identifier = assigned[0];\n\n    if (identifier.type != 'IDENTIFIER') {\n      this.errorHandler.throw(\n        'INVALID ASSIGNEE',\n        this.currentToken.line,\n        this.currentToken.col\n      );\n    };\n\n    let node = new Assignment(\n      identifier,\n      expression,\n      this,\n      this.environment\n    );\n    return node;\n  };\n\n  handleBinary() {\n    // console.log('isBinary')\n    let leftNode = this.rawExpression.slice(0, this.index);\n    let rightNode = this.rawExpression.slice(this.index+1);\n\n    if (!leftNode.length || !rightNode.length) {\n      this.errorHandler.throw(\n        'UNABLE TO PARSE BINARY EXPRESSION',\n        this.currentToken.line,\n        this.currentToken.col\n      );\n    };\n\n    let node = new Binary(\n      leftNode,\n      this.currentToken,\n      rightNode,\n      this\n    )\n    return node;\n  }\n\n  handleUnary() {\n    // console.log('isUnary')\n    let expr = this.rawExpression.slice(this.index+1);\n\n    if (!expr.length) {\n      this.errorHandler.throw(\n        'UNABLE TO PARSE UNARY EXPRESSION',\n        this.currentToken.line,\n        this.currentToken.col\n      );\n    }\n\n    let node = new Unary(\n      this.currentToken,\n      expr,\n      this,\n    );\n    return node;\n  };\n\n  handleCall() {\n    let callee = this.previousToken;\n    let args = [];\n    let currentArgument = [];\n\n    this.next();\n    if (!this.currentToken) {\n      this.errorHandler.throw(\n        `UNABLE TO PARSE CALL EXPRESSION`,\n        this.previousToken.line,\n        this.previousToken.col\n      );\n    }\n\n    while (this.currentToken.type != 'BAR') {\n      if (this.currentToken.type != 'COMMA') {\n        currentArgument.push(this.currentToken);\n      } else {\n        args.push(currentArgument);\n        currentArgument = [];\n      };\n      this.next();\n      if (!this.currentToken) {\n        this.errorHandler.throw(\n          `EXPECTED '|' after argument list`,\n          this.previousToken.line,\n          this.previousToken.col\n        )\n      };\n    };\n\n    if (currentArgument.length) {\n      args.push(currentArgument);\n      currentArgument = [];\n    }\n    \n    let node = new Call(\n      callee,\n      args,\n      this,\n      this.environment,\n    )\n    return node;\n  };\n\n  handleOpenParen() {\n    // console.log('isGroup')\n    let group = []\n    while (this.isInGroup()) {\n      group.push(this.currentToken);\n      this.next();\n      if (!this.currentToken) {\n        this.errorHandler.throw(`EXPECTED ')' AFTER EXPRESSION -- EOF`);\n      };\n    };\n    let node = new Group(\n      group,\n      this\n      );\n    return node;\n  };\n\n  handlePrimary() {\n    // console.log('isPrimary')\n    let node = new Literal(this.currentToken);\n    return node;\n  };\n\n  handleVariable() {\n    // console.log('isVariable')\n    let node = new Variable(\n      this.currentToken, \n      this.environment\n    );\n    return node;\n  };\n\n  handleReserved() {\n    this.errorHandler.throw(\n      'UNEXPECTED KEYWORD',\n      this.currentToken.line,\n      this.currentToken.col,\n    );\n  };\n\n  handleForbidden() {\n    this.errorHandler.throw(\n      'FORBIDDEN SYMBOL IN EXPRESSION',\n      this.currentToken.line,\n      this.currentToken.col,\n    );\n  };\n\n  evaluate() {\n    // console.log('expression to parse');\n    // console.log(this.rawExpression);\n\n    /*\n      Parsing the expressions with lowest precedence (EQUALITY)\n      We iterate through the rawExpression from right to left due to the association rule of these operators.\n\n      The order of precedence is as follows\n      --> EQUALITY\n      --> COMPARISSON\n      --> ADDITION - SUBTRACTION\n      --> MULTIPLICATION - DIVISION\n      --> UNARY\n      --> GROUP\n      --> PRIMARY\n    */\n\n\n    while (this.currentToken) {\n      if (this.isForbidden(this.currentToken)) {\n        this.handleForbidden();\n      };\n      this.prev();\n    };\n    this.resetToEnd();\n\n    while (this.currentToken) {\n      if (this.isReserved(this.currentToken)) {\n        this.handleReserved();\n      };\n      this.prev();\n    };\n    this.reset();\n\n    while (this.currentToken && this.nextToken) {\n      if (this.isLiteral(this.currentToken) && this.isLiteral(this.nextToken)) { \n        this.errorHandler.throw(\n          'UNEXPECTED LITERAL',\n          this.nextToken.line,\n          this.nextToken.col\n        );\n      };\n      this.next();\n    };\n    this.reset();\n\n    while (this.currentToken) {\n      if (this.currentToken.type == 'EQUALS') {\n        if (!this.isInGroup()) {\n          return this.handleAssignment();\n        };\n      };\n      this.next();\n    };\n    this.resetToEnd();\n\n    while (this.index >= 0) {\n      if (this.isEqualityOperator(this.currentToken)) {\n        if (!this.isInGroup()) {\n          return this.handleBinary();\n        };\n      };\n      this.prev();\n    };\n    this.resetToEnd();\n\n    while (this.index >= 0) {\n      if (this.isComparissonOperator(this.currentToken)) {\n        if (!this.isInGroup()) {\n          return this.handleBinary();\n        };\n      };\n      this.prev();\n    };\n    this.resetToEnd();\n\n    while (this.index >= 0) {\n      if (this.isAdditionOperator(this.currentToken)) {\n        if (!this.isInGroup()) {\n          if (this.previousToken) {\n            if (!this.isOperator(this.previousToken)) {\n              return this.handleBinary();\n            };\n          };\n        };\n      };\n      this.prev();\n    };\n    this.resetToEnd();\n\n    while (this.index >= 0) {\n      if (this.isMultiplicationOperator(this.currentToken)) {\n        if (!this.isInGroup()) {\n          return this.handleBinary();\n        };\n      };\n      this.prev();\n    };\n    this.reset();\n\n    while (this.currentToken) {\n      if (this.isUnaryOperator(this.currentToken)) {\n        if (!this.isInGroup()) {\n          return this.handleUnary();\n        };\n      };\n      this.next();\n    };\n    this.reset();\n\n    while (this.currentToken) {\n      if (this.currentToken.type == 'BAR') {\n        return this.handleCall();\n      };\n      this.next();\n    };\n    this.reset();\n\n    while (this.currentToken) {\n      if (this.currentToken.type == \"LPAREN\") {\n        this.next();\n        return this.handleOpenParen();\n      };\n      this.next();\n    };\n    this.reset();\n\n    while (this.currentToken) {\n      if (this.currentToken.type == \"NUMBER\" || this.currentToken.type == \"STRING\") {\n        return this.handlePrimary();\n      };\n      this.next();\n    };\n    this.reset();\n\n    while (this.currentToken) {\n      if (this.currentToken.type == \"IDENTIFIER\") {\n        return this.handleVariable();\n      };\n      this.next();\n    };\n    this.reset();\n\n    return {\n      value : undefined,\n    };\n\n  };\n};\n\nmodule.exports = {\n  Evaluator,\n};\n\n\n\n// const { Environment } = require('../environment/Environment');\n// const { Lexer } = require('../lexer/lexer');\n\n// console.time('parsing')\n// const env = new Environment();\n// const lexer = new Lexer(\"1\");\n// const parser = new Parser(env);\n// parser.load(lexer.tokens);\n// result = parser.parse();\n// console.log(result);\n\n// console.timeEnd('parsing')","import React from 'react';\n\nconst AppContext = React.createContext('app');\n\nexport default AppContext;","const examples = {\n  prime: \n`@a = 2;\n\nwhile (a < 100) {\n  @b = 2;\n  @notprime = 0;\n  while (b <= (a / 2)) {\n    if (!(a % b == 0)) {\n      b = b+1;\n    } else {\n      b = a;\n      notprime = 1;\n    };\n  };\n  if (!notprime) {\n    show a + ' is prime';\n    show;\n  };\n  a = a + 1;\n};\n`,\n\n  function:\n`fn sayHi|name| => {\n  show 'hello ' + name;\n};\n\nsayHi|'Johnny'|;\n`,\n\n  while:\n`@counter = 0;\n\nwhile (counter < 10) {\n  show counter;\n  counter = counter + 1;\n};\n`,\n\n  variable:\n`@name = 'Patricia';\n\nshow name;\n`,\n\n  pumpkin:\n`fn eatPumpkin|| => {\n  show 'eating a pumpkin';\n  numberOfPumpkins = numberOfPumpkins - 1;\n  show 'there are ' + numberOfPumpkins + ' left';\n  show;\n};\n\n@numberOfPumpkins = 20;\n\nwhile (numberOfPumpkins > 5) {\n  eatPumpkin||;\n};\n`\n}\n\nexport {\n  examples,\n};","import React , { Component } from 'react';\nimport AppContext from './AppContext';\nimport { examples } from './examples';\n\nimport { Zap } from 'jzap';\n\nclass CodeContextProvider extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      value: '',\n      result: [],\n      showStmt: false,\n      program: null,\n    };\n  };\n\n  showStmt = (show) => {\n    if (show) {\n      this.setState({\n        showStmt: true,\n      })\n    } else {\n      this.setState({\n        showStmt: false,\n      });\n    };\n  };\n\n  setValue = (value) => {\n    this.setState({\n      value,\n    });\n  };\n\n  setSelection = (selection) => {\n    if (examples[selection]) {\n      this.setValue(examples[selection]);\n    } else {\n      this.setValue('');\n    }\n  };\n\n  execute = () => {\n    const program = new Zap(this.state.value);\n    const logs = program.interpreter.parser.log.values;\n    \n    this.setState({\n      result : logs,\n      program : program.interpreter,\n    });\n  };\n\n  render () {\n    const contextValues = {\n      state: this.state,\n      setValue: this.setValue,\n      execute: this.execute,\n      setSelection: this.setSelection,\n      showStmt: this.showStmt,\n    };\n    \n    return (\n      <AppContext.Provider value={contextValues}>\n        {this.props.children}\n      </AppContext.Provider>\n    );\n  };\n};\n\nexport default CodeContextProvider;","import React from 'react';\n\nconst DocContext = React.createContext('doc');\n\nexport default DocContext;","import React , { Component } from 'react';\nimport DocContext from './DocContext';\n\nclass DocContextProvider extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      step: 'expressions',\n    };\n  };\n\n  setStep = (step) => {\n    this.setState({\n      step,\n    });\n  };\n\n  render () {\n    const contextValues = {\n      state: this.state,\n      setStep: this.setStep,\n    };\n    \n    return (\n      <DocContext.Provider value={contextValues}>\n        {this.props.children}\n      </DocContext.Provider>\n    );\n  };\n};\n\nexport default DocContextProvider;","import styled from 'styled-components';\n\nconst BannerContainer = styled.div`\n  height: 100%;\n  background: linear-gradient${props => props.gradient};\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`\n\nconst CodeContainer = styled.div`\n  height: 60%;\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  flex-wrap: wrap;\n  \n  @media only screen and (max-width: 900px) {\n    height: 65%;\n  }\n`\n\nconst GithubMark = styled.a`\n  transition: ease 0.2s all;\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  height: 50px;\n  width: 50px;\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-image: url('/ZAP/gh-mark.png');\n\n  &:hover {\n    transform: scale(1.1);\n  }\n\n  @media only screen and (max-width: 900px) {\n    display: none;\n  }\n`\n\nexport {\n  BannerContainer,\n  CodeContainer,\n  GithubMark,\n};","import styled from 'styled-components';\n\nconst SectionContainer = styled.div`\n  width: 40%;\n  min-width: 430px;\n  height: 450px;\n  padding: 0 1%;\n  display: flex;\n  background-color: rgba(0, 0, 0, 0.1);\n  border-radius: 5px;\n  flex-direction: column;\n  justify-content: space-evenly;\n  overflow: hidden;\n\n  @media only screen and (max-width: 900px) {\n    min-width: 90%;\n    min-height: 250px;\n    height: 50%;\n  }\n\n  @media only screen and (max-height: 750px) and (min-width: 900px) {\n    min-height: 300px;\n    height: 50%;\n  }\n`\n\nconst Button = styled.div`\n  transition: 0.3s ease all;\n  display: inline-block;\n  border-radius: 3px;\n  padding: 0.5rem 0;\n  text-align: center;\n  width: 11rem;\n  background: transparent;\n  color: white;\n  border: 2px solid white;\n  cursor: pointer;\n\n  &:hover {\n    background: white;\n    color: palevioletred;\n  }\n`\n\nconst BtnContainer = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n`\n\nexport {\n  SectionContainer,\n  Button,\n  BtnContainer,\n};","import React , { Component } from 'react';\nimport { Button , SectionContainer , BtnContainer } from './styles';\nimport { Controlled as CodeMirror } from 'react-codemirror2'\n\nimport AppContext from '../context/AppContext';\n\nrequire('codemirror/lib/codemirror.css');\nrequire('codemirror/theme/dracula.css');\nrequire('codemirror/theme/neat.css');\nrequire('codemirror/mode/xml/xml.js');\nrequire('codemirror/mode/javascript/javascript.js');\n\n\nclass Editor extends Component {\n  constructor (props) {\n    super (props);\n    this.state = {\n      value: '',\n    };\n  };\n\n  handleSelection = (event) => {\n    this.context.setSelection(event.target.value);\n  };\n\n  render () {\n    return (\n      <SectionContainer>\n        <CodeMirror\n          value={this.context.state.value}\n          options={{\n            mode: 'javascript',\n            theme: 'dracula',\n            lineNumbers: true\n          }}\n          onBeforeChange={(editor, data, value) => {\n            this.setState({value});\n            this.context.setValue(this.state.value);\n          }}\n          onChange={(editor, data, value) => {\n          }}\n        />\n        <BtnContainer>\n\n          <select id=\"example\" onChange={this.handleSelection}>\n            <option>-- Examples --</option>\n            <option value=\"prime\">Prime Numbers</option>\n            <option value=\"function\">Function</option>\n            <option value=\"while\">While</option>\n            <option value=\"variable\">Variable</option>\n            <option value=\"pumpkin\">Pumpkins</option>\n          </select>\n\n          <Button onClick={this.context.execute}>Run</Button>\n\n        </BtnContainer>\n      </SectionContainer>\n    );\n  };\n};\n\nEditor.contextType = AppContext;\n\nexport default Editor;","import styled , { css , keyframes } from 'styled-components';\n\nconst Container = styled.div`\n  width: 40%;\n  min-width: 450px;\n  height: 450px;\n\n  background-color: rgb(18 18 18);\n  border-radius: 5px;\n  overflow: hidden;\n\n  box-shadow: 0 0 100px rgba(0, 0, 0, 0.4);\n\n  position: relative;\n\n  @media only screen and (max-width: 900px) {\n    min-width: 92%;\n    height: 35%;\n  }\n\n  @media only screen and (max-height: 750px) and (min-width: 900px) {\n    min-height: 300px;\n    height: 50%;\n  }\n\n  z-index: 1;\n`\n\nconst DotContainer = styled.div`\n  display: flex;\n  height: 40px;\n  position: absolute;\n`\n\nconst Dot = styled.div`\n  height: 10px;\n  width: 10px;\n  top: 10px;\n  border-radius: 50%;\n  position: relative;\n\n  ${props => css`\n    left: ${props.left};\n    background-color: ${props.color};\n    border: 1px solid ${props.color};\n  `}\n`\nconst TextField = styled.div`\n  position: absolute;\n  height: 95%;\n  top: 30px;\n  margin: 0 10px;\n  color: white;\n  font-family: monospace;\n  overflow: scroll;\n\n  // border: 1px solid red;\n\n  ::-webkit-scrollbar {\n    width: 0px;\n    background: transparent;\n  }\n`\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst ToggleStmt = styled.div`\n  transition: 0.3s ease all;\n  position: absolute;\n  bottom: 10px;\n  right: 10px;\n  height: 30px;\n  width: 30px;\n  border: 2px dotted white;\n  border-radius: 50%;\n\n  animation: ${rotate} 10s linear infinite;\n\n  &:hover {\n    cursor: pointer;\n    transform: scale(1.1)\n  }\n`\n\nexport {\n  Container,\n  Dot,\n  DotContainer,\n  TextField,\n  ToggleStmt,\n};","import React , { Component } from 'react';\nimport { Container , Dot , DotContainer , TextField , ToggleStmt } from './styles';\nimport AppContext from '../context/AppContext';\n\nclass Terminal extends Component {\n  getDate() {\n    const monthNames = [\n      \"Jan\", \"Feb\", \"Marc\", \"Apr\", \"May\", \"June\",\n      \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"\n    ];\n\n    const weekDays = [\n      \"Sun\", \"Mon\", \"Tues\", \"Wed\", \"Thurs\", \"Fri\", \"Sat\"\n    ];\n\n    const d = new Date();\n    const weekDay = weekDays[d.getDay()];\n    const day = d.getDate()\n    const month = monthNames[d.getMonth()];\n    const hour = d.getHours();\n    const minute = d.getMinutes();\n    const sec = d.getSeconds();\n    return (`${weekDay} ${month} ${day} ${hour}:${minute}:${sec}`)\n  }\n\n  handleShowStmt = () => {\n    this.context.showStmt(true);\n  };\n\n  render() {\n    return (\n      <Container>\n        <DotContainer>\n          <Dot left='10px' color='rgb(256, 93, 91)' />\n          <Dot left='17px' color='rgb(254, 188, 64)' />\n          <Dot left='24px' color='rgb(51, 199, 72)' />\n        </DotContainer>\n        <TextField>\n          <span>Last login: {this.getDate()} on ttys002</span>\n          <br/>\n          <br/>\n          {\n            this.context.state.result.map((item, index) => {\n              if (item.log !== undefined) {\n                return (\n                  <React.Fragment key={index}>\n                    <span>{item.log}</span>\n                    <br/>\n                  </React.Fragment>\n                );\n              } else {\n                return (\n                  <React.Fragment key={index}>\n                    <span style={{'color' : 'red'}}>{item.error.message}</span>\n                    <br/>\n                  </React.Fragment>\n                );\n              }\n            })\n          }\n        </TextField>\n        {/*\n          this.context.state.result.length &&\n          <ToggleStmt onClick={this.handleShowStmt}/>\n        */}\n      </Container>\n    )\n  };\n};\n\nTerminal.contextType = AppContext;\n\nexport default Terminal;","import styled from 'styled-components';\n\nconst Pic = styled.div`\n  height: 100px;\n  width: 150px;\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-image: url('/ZAP/logo.png');\n\n  @media only screen and (max-width: 900px) {\n    height: 70px;\n    width: 100px;\n  }\n`\n\nconst Slogan = styled.span`\n  font-family: 'Orbitron', sans-serif;\n  font-weight: bold;\n  @media only screen and (max-width: 900px) {\n    font-size: 0.8rem;\n  }\n`\n\nconst LogoContainer = styled.div`\n  position: absolute;\n  top: 0;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 25%;\n  color: white;\n\n  @media only screen and (max-width: 900px) {\n    height: 18%;\n  }\n`\n\nexport {\n  Pic,\n  Slogan,\n  LogoContainer,\n};","import React , { Component } from 'react';\nimport { Pic , Slogan , LogoContainer } from './styles';\n\nclass Logo extends Component {\n  render() {\n    return (\n      <LogoContainer>\n        <Pic />\n        <Slogan>A Javscript Interpreted Language</Slogan>\n      </LogoContainer>\n    );\n  };\n};\n\nexport default Logo;","import styled, { keyframes } from 'styled-components';\n\nconst moveUpDown = keyframes`\n  0%, 100% {\n    margin-top: 100px;\n  }\n  50% {\n    margin-top: 85px;\n  }\n`;\n\nconst FooterContainer = styled.div`\n  position: absolute;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 25%;\n  color: white;\n  font-family: 'Orbitron', sans-serif;\n  bottom: 0;\n`\n\nconst FooterText = styled.span`\n  position: absolute;\n`\n\nconst DownArrow = styled.div`\n  height: 50px;\n  width: 50px;\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-position: center;\n  background-image: url('/ZAP/down-arrow.png');\n  animation: ${moveUpDown} 2s linear infinite;\n`\n\nexport {\n  FooterContainer,\n  FooterText,\n  DownArrow,\n};","import React , { Component } from 'react';\nimport { FooterContainer , FooterText , DownArrow } from './styles';\n\nclass Footer extends Component {\n  render() {\n    return (\n      <FooterContainer>\n        <FooterText>Read the Docs</FooterText>\n        <DownArrow />\n      </FooterContainer>\n    );\n  };\n};\n\nexport default Footer;","import React, { Component } from 'react';\nimport { BannerContainer , CodeContainer, GithubMark } from './styles';\nimport Editor from '../Editor/Editor';\nimport Terminal from '../Terminal/Terminal';\nimport Logo from '../Logo/Logo';\nimport Footer from '../Footer/Footer';\n\nclass Banner extends Component {\n  render () {\n    const gradientList = [\n      '(to right, #ff5f6d, #ffc371)',\n      '(to right, #ffafbd, #ffc3a0)',\n      '(to right, #2193b0, #6dd5ed)',\n      '(to right, #ee9ca7, #ffdde1)',\n      '(to right, #ee9ca7, #ffdde1)',\n      '(to right, #06beb6, #48b1bf)',\n      '(to right, #eb3349, #f45c43)',\n      '(to right, #dd5e89, #f7bb97)',\n      '(to right, #56ab2f, #a8e063)',\n      '(to right, #614385, #516395)',\n      '(to right, #eecda3, #ef629f)',\n\n    ]\n    return (\n      <BannerContainer\n      gradient={gradientList[Math.floor(Math.random() * gradientList.length)]}\n      >\n        <Logo />\n        <GithubMark \n          href='https://github.com/jzsiggy/ZAP'\n        />\n        <CodeContainer>\n          <Editor />\n          <Terminal />\n        </CodeContainer>\n        <Footer />\n      </BannerContainer>\n    );\n  };\n};\n\nexport default Banner;","import styled from 'styled-components';\n\nconst DocContainer = styled.div`\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  align-items: center;\n  background-color: rgb(253, 246, 228);\n`\n\nconst CodeContainer = styled.div`\n  height: 80%;\n  width: 100%;\n  display: flex;\n  justify-content: space-evenly;\n  align-items: flex-start;\n  flex-wrap: wrap;\n\n  @media only screen and (max-width: 900px) {\n    align-items: space-between;\n  }\n`\n\nconst GithubMark = styled.a`\n  transition: 0.2s ease all;\n  position: absolute;\n  top: ${window.innerHeight + 10}px;\n  right: 10px;\n  height: 30px;\n  width: 30px;\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-image: url('/ZAP/gh-mark.png');\n\n  &:hover {\n    transform: scale(1.1);\n  }\n\n  @media only screen and (min-width: 900px) {\n    display: none;\n  }\n`\n\nexport {\n  DocContainer,\n  CodeContainer,\n  GithubMark,\n};","import styled , { css } from 'styled-components';\n\nconst Container = styled.div`\n  width: 40%;\n  min-width: 450px;\n  height: 70%;\n\n  background-color: rgb(40 42 54);\n  border-radius: 5px;\n  overflow: hidden;\n\n  box-shadow: 0 0 100px rgba(0, 0, 0, 0.4);\n    \n  position: relative;\n\n  @media only screen and (max-width: 900px) {\n    min-width: 92%;\n    height: 300px;\n    max-height: 38%;\n  }\n`\n\nconst DotContainer = styled.div`\n  display: flex;\n  height: 40px;\n  position: absolute;\n`\n\nconst Dot = styled.div`\n  height: 10px;\n  width: 10px;\n  top: 10px;\n  border-radius: 50%;\n  position: relative;\n\n  ${props => css`\n    left: ${props.left};\n    background-color: ${props.color};\n    border: 1px solid ${props.color};\n  `}\n`\nconst TextField = styled.div`\n  position: absolute;\n  height: 95%;\n  top: 30px;\n  margin: 0 10px;\n  color: white;\n  font-family: monospace;\n  overflow: scroll;\n\n  // border: 1px solid red;\n\n  ::-webkit-scrollbar {\n    width: 0px;\n    background: transparent;\n  }\n`\n\nexport {\n  Container,\n  Dot,\n  DotContainer,\n  TextField,\n};","import React , { Component } from 'react';\nimport { Container , Dot , DotContainer , TextField } from './styles';\n\nclass Terminal extends Component {\n\n  getDate() {\n    const monthNames = [\n      \"Jan\", \"Feb\", \"Marc\", \"Apr\", \"May\", \"June\",\n      \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"\n    ];\n\n    const weekDays = [\n      \"Sun\", \"Mon\", \"Tues\", \"Wed\", \"Thurs\", \"Fri\", \"Sat\"\n    ];\n\n    const d = new Date();\n    const weekDay = weekDays[d.getDay()];\n    const day = d.getDate()\n    const month = monthNames[d.getMonth()];\n    const hour = d.getHours();\n    const minute = d.getMinutes();\n    const sec = d.getSeconds();\n    return (`${weekDay} ${month} ${day} ${hour}:${minute}:${sec}`)\n  }\n\n  getError = () => {\n\n  };\n\n  render() {\n    return (\n      <Container>\n        <DotContainer>\n          <Dot left='10px' color='rgb(256, 93, 91)' />\n          <Dot left='17px' color='rgb(254, 188, 64)' />\n          <Dot left='24px' color='rgb(51, 199, 72)' />\n        </DotContainer>\n        <TextField>\n          <span>Last login: {this.getDate()} on ttys002</span>\n          <br/>\n          <br/>\n          {this.props.text}\n        </TextField>\n      </Container>\n    )\n  };\n};\n\nexport default Terminal;","import styled from 'styled-components';\n\nconst TextField = styled.div`\n  width: 40%;\n  min-width: 450px;\n  height: 70%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n\n\n  @media only screen and (max-width: 900px) {\n    \n    border-radius: 5px;\n    padding: 1%;\n    background-color: rgba(0, 0, 0, 0.05);\n\n    min-width: 90%;\n    height: 300px;\n    max-height: 38%;\n    overflow: scroll;\n\n    justify-content: unset;\n  }\n`\n\nconst Title = styled.span`\n  font-weight: bold;\n  font-size: 2rem;\n  color: rgb(40 42 54);\n  font-family: 'Orbitron', sans-serif;\n\n  @media only screen and (max-width: 900px) {\n    margin-bottom: 30px;\n    font-size: 1.7rem;\n  }\n`\n\nconst Description = styled.span`\n  margin: 0 30px;\n  text-align: center;\n  font-size: 1.3rem;\n\n  @media only screen and (max-width: 900px) {\n    font-size: 1rem;\n  }\n`\n\nexport {\n  TextField,\n  Title,\n  Description,\n};","import React , { Component } from 'react';\nimport { TextField , Title , Description } from './styles';\n\nclass Doc extends Component {\n  render() {\n    return(\n      <TextField>\n        <Title>{this.props.title}</Title>\n        <Description>{this.props.description}</Description>\n      </TextField>\n    )\n  };\n};\n\nexport default Doc;","import styled , { css } from 'styled-components';\n\nconst Container = styled.div`\n  position: relative;\n  width: 60%;\n  height: 30%;\n  margin: 0 20%;\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n\n  @media only screen and (max-width: 900px) {\n    max-height: 20%;\n  }\n`\n\nconst Dot = styled.div`\n  transition: 0.2s ease all;\n  width: ${props => props.size};\n  height: ${props => props.size};\n  border-radius: 50%;\n  padding: 5px;\n  border: 1px solid rgb(40 42 54);\n  &:hover {\n    background-color: rgb(40 42 54);\n    transform: scale(1.2);\n    cursor: pointer;\n  }\n  ${props => props.current===props.step && css`\n    background-color: rgb(40 42 54);\n  `}\n`\n\nexport {\n  Container,\n  Dot,\n};","import React , { Component } from 'react';\nimport { Container , Dot } from './styles';\nimport DocContext from '../context/DocContext';\n\nclass Navigation extends Component {\n  render() {\n    return(\n      <Container>\n        <Dot\n          size={'10px'}\n          current={this.context.state.step}\n          step={'expressions'}\n          onClick={() => this.context.setStep('expressions')}\n        />\n        <Dot\n          size={'13px'}\n          current={this.context.state.step}\n          step={'declarations'}\n          onClick={() => this.context.setStep('declarations')}\n        />\n        <Dot\n          size={'18px'}\n          current={this.context.state.step}\n          step={'conditionals'}\n          onClick={() => this.context.setStep('conditionals')}\n        />\n        <Dot\n          size={'13px'}\n          current={this.context.state.step}\n          step={'loops'}\n          onClick={() => this.context.setStep('loops')}\n        />\n        <Dot\n          size={'10px'}\n          current={this.context.state.step}\n          step={'functions'}\n          onClick={() => this.context.setStep('functions')}\n        />\n      </Container>\n    )\n  };\n};\n\nNavigation.contextType = DocContext;\n\nexport default Navigation;","import styled from 'styled-components';\n\nconst FooterContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  height: 100px;\n`\n\nconst FooterText = styled.span`\n  size: 1rem;\n`\n\nexport {\n  FooterText, \n  FooterContainer,\n}","import { FooterText, FooterContainer } from './styles';\nimport React , { Component } from 'react';\n\nclass Footer extends Component {\n  render() {\n    return (\n      <>\n        <FooterContainer>\n          <FooterText>Made with &hearts; by <a href='https://github.com/jzsiggy/'>jzsiggy</a></FooterText>\n        </FooterContainer>\n      </>\n    )\n  }\n}\n\nexport default Footer;","import styled from 'styled-components';\n\nconst Pink = styled.span`\n  color: rgb(242, 134, 189);\n`\n\nconst Blue = styled.span`\n  color: rgb(151, 225, 241);\n`\n\nconst Green = styled.span`\n  color: rgb(98, 232, 132);\n`\n\nconst Purple = styled.span`\n  color: rgb(191, 152, 238);\n`\n\nconst Yellow = styled.span`\n  color: rgb(231, 238, 152);\n`\n\nexport {\n  Pink,\n  Blue,\n  Green,\n  Purple,\n  Yellow,\n};","import React from 'react';\nimport { Pink , Purple , Green , Yellow } from './colors';\n\nconst data = {\n  expressions : {\n    title: `Expressions`,\n\n    description: <>\n      Expression statements are at the root of the ZAP interpreter. \n      These statements are defined by arithmetic or logical expressions \n      not followed or trailed by ZAP keywords. The value of these statements \n      are calculated by the Evaluator class.\n      The supported operators are: \n      <br/><br/> \n      '+', '-', '*', '/', '%', '>', '&lt;', '&gt;=', '&lt;=', '==' & '!='\n      <br/><br/>\n      The order of execution follows 'PEMDAS'.\n    </>,\n\n    terminal: <>\n      <Purple>1</Purple>&nbsp;\n      <Pink>+</Pink>&nbsp;\n      <Purple>2</Purple>&nbsp;\n      <Pink>/</Pink>\n      &nbsp;(\n      <Purple>3</Purple>&nbsp;\n      <Pink>-</Pink>&nbsp;\n      <Purple>4</Purple>\n      )&nbsp;\n      <Pink>*</Pink>&nbsp;\n      <Purple>5</Purple>&nbsp;\n      <Pink>%</Pink>&nbsp;\n      <Purple>6</Purple>&nbsp;\n      <Pink>!=</Pink>&nbsp;\n      <Purple>8</Purple>\n      ;\n    </>,\n  },\n\n  declarations : {\n    title: `Declarations`,\n\n    description: <>\n      Declaration statements are used to define variables (or functions, as we`ll see soon) in ZAP.\n      This allows us to store values and data to be used further in the code.\n      Variable declarations in ZAP start with an '@', followed by its name. \n      This initializes tha variable, however does not hand it any value. \n      To do so, we must add an equals '=', and specify the value.\n    </>,\n\n    terminal: <>\n      <Pink>@</Pink>\n      <Green>variable</Green>&nbsp;\n      <Pink>=</Pink>&nbsp;\n      <Yellow>'I am a string'</Yellow>\n      ;\n    </>,\n  },\n\n  conditionals : {\n    title: `Conditionals`,\n\n    description: <>\n      Conditional statements is where ZAP begins to behave more like a programming language,\n      and less like an arithmetic calcultor. If statements make it possible to control what\n      gets executed by the program depending on the current program state. In Zap, we define \n      If statements by adding the 'if' keyword, followed by an expression. This expression\n      is what defines if the code in the body of the statement will be executed.\n    </>,\n    \n    terminal: <>\n      <Pink>@</Pink>\n      <Green>x</Green>&nbsp;\n      <Pink>=</Pink>&nbsp;\n      <Purple>5</Purple>; \n      <br/><br/>\n      <Pink>if</Pink>\n      &nbsp;(\n      <Green>x</Green>&nbsp;\n      <Pink>==</Pink>&nbsp;\n      <Purple>5</Purple>\n      ) &#123; \n      <br/>\n      &emsp; <Green>show</Green>&nbsp;\n      <Yellow>'x'</Yellow>; \n      <br/>\n      &#125;;\n      <br/><br/>\n      * shows x *\n    </>,\n  },\n\n  loops : {\n    title: `Loops`,\n\n    description: <>\n      Loops allow our program to execute statements more times than the specified in the source code.\n      This is where our program complexity stops being directly proportional to the size of the code.\n      The only type of loop supported in ZAP is the 'While loop'. The code in the body of the statement\n      will be executed while the expression specified is true.\n    </>,\n    \n    terminal: <>\n      <Pink>@</Pink>\n      <Green>counter</Green>&nbsp;\n      <Pink>=</Pink>&nbsp;\n      <Purple>0</Purple>;\n      <br/><br/>\n      <Pink>while</Pink>\n      &nbsp;(\n      <Green>counter</Green>&nbsp;\n      <Pink>&lt;</Pink>&nbsp;\n      <Purple>10</Purple>\n      ) &#123;\n      <br/>\n      &emsp; <Green>show</Green>&nbsp;\n      <Green>counter</Green>&nbsp;\n      <Pink>=</Pink>&nbsp;\n      <Green>counter</Green>&nbsp;\n      <Pink>+</Pink>&nbsp;\n      <Purple>1</Purple>;\n      <br/>\n      &#125;; <br/><br/>\n      * counts to 10 *\n\n    </>,\n  },\n\n  functions : {\n    title: `Functions`,\n\n    description: <>\n      We have reached the statement with the highest complexity within ZAP.\n      Using functions, we can reuse pieces of code written earlier in the source.\n      To define functions in ZAP, we use th 'fn' keyword, followed by the name of our function.\n      We follow with a '|' key and begin the list of arguments. After closing the list \n      of arguments with another '|', we add a '=>' token and an opening brace. the body of our \n      function goes here.<br/><br/>\n      To call our function, we must write its name, and list the arguments we want to use.\n    </>,\n    \n    terminal: <>\n      <Green>fn</Green>&nbsp;\n      <Green>sayHi</Green>\n      <Pink>|</Pink>\n      <Green>name</Green>\n      ,&nbsp;\n      <Green>greeting</Green>\n      <Pink>|</Pink>&nbsp;\n      => &#123; <br/>\n      &emsp; <Green>show</Green> &nbsp;\n      <Green>greeting</Green>&nbsp;\n      <Pink>+</Pink>&nbsp;\n      <Yellow>' '</Yellow>&nbsp;\n      <Pink>+</Pink>&nbsp;\n      <Green>name</Green>; <br/>\n      &#125;;<br/><br/>\n\n      <Green>sayHi</Green>\n      <Pink>|</Pink>\n      <Yellow>'John'</Yellow>\n      ,\n      <Yellow>'Hello'</Yellow>\n      <Pink>|</Pink>;<br/><br/>\n\n      * shows 'Hello John' *\n    </>,\n  },\n};\n\nexport default data;","import React , { Component } from 'react';\nimport { DocContainer , CodeContainer, GithubMark } from './styles';\nimport Terminal from '../Terminal/Terminal';\nimport Doc from '../Doc/Doc';\nimport Navigation from '../Navigation/Navigation';\nimport Footer from '../footer/Footer';\n\nimport data from '../context/data';\n\nimport DocContext from '../context/DocContext';\n\nclass Documentation extends Component {\n  render() {\n    return (\n      <DocContainer>\n        <GithubMark \n          href='https://github.com/jzsiggy/ZAP'\n        />\n        <Navigation \n        \n        />\n        <CodeContainer>\n          <Doc \n            title={data[this.context.state.step]['title']}\n            description={data[this.context.state.step]['description']}\n          />\n          <Terminal \n            text={data[this.context.state.step]['terminal']}\n          />\n        </CodeContainer>\n        <Footer />\n      </DocContainer>\n    )\n  };\n};\n\nDocumentation.contextType = DocContext;\n\nexport default Documentation;","import styled from 'styled-components';\n\nconst Container = styled.div`\n  position: fixed;\n  background-color: rgba(255, 255, 255, 0.99);\n  border-radius: 5px;\n  box-shadow: 0 0 100px rgba(0, 0, 0, 0.4);\n  top: 5%;\n  bottom: 5%;\n  left: 5%;\n  right: 5%;\n  z-index: 100;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nconst Close = styled.div`\n  transition: 0.2s ease all;  \n  position: absolute;\n  top: 10px;\n  left: 10px;\n  height: 30px;\n  width: 30px;\n  // border: 1px solid red;\n  // border-radius: 50%;\n\n  background-image: url('/ZAP/close.png');\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-position: center;\n\n  &:hover {\n    cursor: pointer;\n    transform: scale(1.1);\n  }\n`\n\nconst StmtWrapper = styled.div`\n  height: 80%;\n  width: 80%;\n`\n\nexport {\n  Container,\n  Close,\n  StmtWrapper,\n};","import React , { Component } from 'react';\n\nclass PrintStmt extends Component {\n  render() {\n    return (\n      <>\n        <h1>Print Statment</h1>\n        <p>{this.props.stmt.value}</p>\n      </>\n    )\n  };\n};\n\nexport default PrintStmt;","import React , { Component } from 'react';\n\nclass WhileStmt extends Component {\n  render() {\n    return (\n      <>\n        <h1>While Statment</h1>\n        <p>{this.props.stmt.value}</p>\n      </>\n    )\n  };\n};\n\nexport default WhileStmt;","import React , { Component } from 'react';\n\nclass IfStmt extends Component {\n  render() {\n    return (\n      <>\n        <h1>If Statment</h1>\n        <p>{this.props.stmt.value}</p>\n      </>\n    )\n  };\n};\n\nexport default IfStmt;","import React , { Component } from 'react';\n\nclass DeclarationStmt extends Component {\n  render() {\n    return (\n      <>\n        <h1>Declaration Statment</h1>\n        <p>{this.props.stmt.value}</p>\n      </>\n    )\n  };\n};\n\nexport default DeclarationStmt;","import React , { Component } from 'react';\n\nclass ExprStmt extends Component {\n  render() {\n    return (\n      <>\n        <h1>Expression Statment</h1>\n        <p>{this.props.stmt.value}</p>\n      </>\n    )\n  };\n};\n\nexport default ExprStmt;","import React , { Component } from 'react';\n\nclass FunctionStmt extends Component {\n  render() {\n    return (\n      <>\n        <h1>Function Statment</h1>\n        <p>{this.props.stmt.value}</p>\n      </>\n    )\n  };\n};\n\nexport default FunctionStmt;","import React , { Component } from 'react';\nimport AppContext from '../../banner/context/AppContext';\nimport { Container , Close , StmtWrapper } from './styles';\n\nimport { handleStmt } from './assets/HandleStmt';\n\nclass Structure extends Component {\n  \n  handleClose = () => {\n    this.context.showStmt(false);\n  };\n\n  render() {\n    return (\n      this.context.state.showStmt &&\n      <Container>\n        <Close onClick={this.handleClose}/>\n        <StmtWrapper>\n        {\n          this.context.state.program.statements.map((stmt, index) => {\n            return handleStmt(stmt, index)\n          })\n        }\n        </StmtWrapper>\n      </Container>\n    )\n  }\n}\n\nStructure.contextType = AppContext;\n\nexport default Structure;","import React from 'react';\nimport PrintStmt from './print/PrintStmt';\nimport WhileStmt from './loop/WhileStmt';\nimport IfStmt from './conditional/IfStmt';\nimport DeclarationStmt from './declaration/DeclarationStmt';\nimport ExprStmt from './expression/ExprStmt';\nimport FunctionStmt from './function/FunctionStmt';\n\nconst getType = (stmt) => stmt.constructor.name;\n\nconst handleStmt = (stmt , index) => {\n  switch (getType(stmt)) {\n    case 'ExprStmt':\n      console.log(stmt)\n      return <ExprStmt key={index} stmt={stmt}/>\n    case 'PrintStmt':\n      console.log(stmt)\n      return <PrintStmt key={index} stmt={stmt}/>\n    case 'IfStmt':\n      console.log(stmt)\n      return <IfStmt key={index} stmt={stmt}/>\n    case 'WhileStmt':\n      console.log(stmt)\n      return <WhileStmt key={index} stmt={stmt}/>\n    case 'DeclarationStmt':\n      console.log(stmt)\n      return <DeclarationStmt key={index} stmt={stmt}/>\n    case 'FunctionStmt':\n      console.log(stmt)\n      return <FunctionStmt key={index} stmt={stmt}/>\n    default:\n      return <p>WHAT!?!?!</p>\n  }\n};\n\nexport {\n  handleStmt,\n};","import React from 'react';\nimport CodeContextProvider from './components/banner/context/ContextProvider';\nimport DocContextProvider from './components/docs/context/ContextProvider';\n\nimport Banner from './components/banner/Banner/Container';\nimport Documentation from './components/docs/Documentation/Documentation';\nimport Structure from './components/codeStructure/Structure/Structure';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CodeContextProvider>\n        <Structure />\n        <Banner />\n      </CodeContextProvider>\n\n      <DocContextProvider>\n        <Documentation />\n      </DocContextProvider>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const { globalLog } = require('../log/Log');\n\nclass ErrorHandler {\n  constructor() {\n    this.log = globalLog;\n  };\n\n  throw(msg, line, col) {\n    let err;\n    if (line && col) {\n      err = `\\n\\n${msg} -- ln: ${line}, col: ${col}\\n`\n    } else {\n      err = `\\n\\n${msg}\\n`\n    };\n    try {\n      throw new Error(err);\n    } catch (e) {\n      console.error(e);\n      this.log.error(e, line);\n      // process.exit(1);\n    };\n  };\n};\n\nmodule.exports = {\n  ErrorHandler,\n};"],"sourceRoot":""}